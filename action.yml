name: "Check outdate pods and create issue"
description: "Check for outdated pods and create issue in GitHub with the provided title (and other parameters) if it doesn't exist"

inputs:
  outdated-pod-name:
    description: "Enter the pod name for which outdated pods need to be searched" # Only one pod will be checked
    required: true
  directory:
    description: "Enter the directory where Podfile is located"
    required: true
  search-issue-with-query:
    description: "Search issues with query" # Default is set to the title of the issue
  title: 
    description: "Title of the issue"
  body:
    description: "Description of the issue" # Leave it blank for predefined update message
  assignee: 
    description: "Assignee who'll be assigned for the isuue"
  labels:
    description: "The label for an issue that would be assigned while creating issue"
  color:
    description: "Colors for the label"
    default: FBCA04
  
outputs:
  issue-url: # id of output
    description: "The issue of the url if it is created or already exists"
    value: ${{ steps.github-issue-url.outputs.issue_url }}
  has-outdated-pod: # id of output
    description: "Outdated pod (which is given as input: outdated-pod-name) present"
    value: ${{ steps.has-pod-outdated.outputs.booleanValue }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Install pods
      run: |
        cd example
        rm Podfile.lock
        pod install
      shell: bash

    - name: Check outdated pods
      run: |
        cd ${{ inputs.directory }}
        echo "CURRENT_VERSION=$(pod outdated | grep -i '${{ inputs.outdated-pod-name }}' | cut -d ">" -f2 | cut -d "(" -f1 | sed 's/ //g')" >> $GITHUB_ENV
        echo "LATEST_VERSION=$(pod outdated | grep -i '${{ inputs.outdated-pod-name }}' | cut -d "(" -f2 | cut -d ")" -f1)" >> $GITHUB_ENV
        echo "HAS_ANY_OUTDATED=false" >> $GITHUB_ENV
      shell: bash

    - name: Is latest version exist
      if: env.LATEST_VERSION != ''
      run: echo "HAS_ANY_OUTDATED=true" >> $GITHUB_ENV
      shell: bash

    - name: Set constant values
      run: |
        echo "TITLE=${{ inputs.title }}" >> $GITHUB_ENV
        echo "BODY=Update the ${{ inputs.outdated-pod-name }} SDK from the current version ${{ env.CURRENT_VERSION }} to the ${{ env.LATEST_VERSION }}." >> $GITHUB_ENV
        echo "ASSIGNEE=${{ inputs.assignee }}" >> $GITHUB_ENV
        echo "POD_NEEDS_UPDATE=${{ env.HAS_ANY_OUTDATED }}" >> $GITHUB_ENV
      shell: bash

    - name: Assigne github issue url
      id: has-pod-outdated
      run: echo "booleanValue=${{ env.HAS_ANY_OUTDATED }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Initialise SEARCH_ISSUE_WITH_QUERY
      run: echo "SEARCH_ISSUE_WITH_QUERY=${{ env.TITLE }}" >> $GITHUB_ENV
      shell: bash

    - name: Override SEARCH_ISSUE_WITH_QUERY, if input is available
      if: inputs.search-issue-with-query != ''
      run: echo "SEARCH_ISSUE_WITH_QUERY=${{ inputs.search-issue-with-query }}" >> $GITHUB_ENV
      shell: bash

    - name: Set body of the issue, if defined
      if: inputs.body != ''
      run: echo "BODY=${{ inputs.body }}." >> $GITHUB_ENV
      shell: bash

    - name: Analyse if title of the issue would be created or not
      if: inputs.title == ''
      run: echo "Since title of the issue is not present, issue will not be created. To create the issue at least provide the title."
      shell: bash

    - name: Print constant values
      run: |
        echo "Title: ${{ env.TITLE }}"
        echo "Search issues with query: ${{ env.SEARCH_ISSUE_WITH_QUERY }}"
        echo "Body: ${{ env.BODY }}"
        echo "Assignee: ${{ env.ASSIGNEE }}"
        echo "Laebls: ${{ inputs.labels }}"
        echo "Colors: ${{ inputs.color }}"
        echo "Does pod needs update: ${{ env.POD_NEEDS_UPDATE }}"
      shell: bash

    - name: Check if issue exist or not
      if: env.POD_NEEDS_UPDATE == 'true' && env.SEARCH_ISSUE_WITH_QUERY != ''
      run: echo "issue_number=$(gh issue list --search "${{ env.SEARCH_ISSUE_WITH_QUERY }}" --json number | jq '.[].number')" >> $GITHUB_ENV
      shell: bash

    - name: Create new label
      if: inputs.title != '' && inputs.labels != ''
      run: gh label create --force ${{ inputs.labels }} --description "Pod is outdated" --color ${{ inputs.color}}
      shell: bash

    - name: Create new issue
      if: inputs.title != '' && env.POD_NEEDS_UPDATE == 'true' && env.issue_number == ''
      run: echo "ISSUE_URL=$(gh issue create -a "${{ env.ASSIGNEE }}" -b "${{ env.BODY }}" -t "${{ env.TITLE }}" --label "${{ inputs.labels }}")" >> $GITHUB_ENV
      shell: bash

    - name: Edit existing issue
      if: inputs.title != '' && env.POD_NEEDS_UPDATE == 'true' && env.issue_number != ''
      run: |
        gh issue edit ${{ env.issue_number }} --body "${{ env.BODY }}"
        echo "ISSUE_URL=$(gh issue list --search "${{ env.SEARCH_ISSUE_WITH_QUERY }}" --json url | jq '.[].url')" >> $GITHUB_ENV
      shell: bash

    - name: Assigne github issue url
      id: github-issue-url
      if: env.POD_NEEDS_UPDATE == 'true' && env.ISSUE_URL != ''
      run: echo "issue_url=${{ env.ISSUE_URL }}" >> $GITHUB_OUTPUT
      shell: bash